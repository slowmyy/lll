import { mergeImagesForSelfieFixed } from './imageMerger';
import { Platform } from 'react-native';
import { runwareService } from './runware';

// Conversion File vers Base64
function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const result = reader.result as string;
      if (!result || !result.includes(',')) {
        reject(new Error('Erreur conversion Base64'));
        return;
      }
      const base64 = result.split(',')[1];
      console.log('‚úÖ Conversion Base64 OK, taille:', base64.length);
      resolve(base64);
    };
    reader.onerror = () => reject(new Error('Erreur lecture fichier'));
    reader.readAsDataURL(file);
  });
}

// Conversion URI vers File (pour mobile)
async function uriToFile(uri: string, filename: string): Promise<File> {
  const response = await fetch(uri);
  const blob = await response.blob();
  return new File([blob], filename, { type: 'image/jpeg' });
}

// G√©n√©ration UUID
function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// ‚úÖ FONCTION D'UPLOAD CORRIG√âE
async function uploadMergedImageFixed(mergedFile: File, apiKey: string): Promise<string> {
  console.log('üì§ [UPLOAD] D√©but upload image fusionn√©e');
  console.log('üìÅ Fichier:', mergedFile.name, mergedFile.size, 'bytes');
  
  // Validate inputs
  if (!apiKey || apiKey.length < 10) {
    throw new Error('Cl√© API Runware invalide ou manquante');
  }
  
  if (!mergedFile || mergedFile.size === 0) {
    throw new Error('Fichier image invalide');
  }
  
  try {
    // √âTAPE 1: Conversion Base64 s√©curis√©e
    const base64Data = await fileToBase64(mergedFile);
    
    // √âTAPE 2: Requ√™te d'upload EXACTE
    const uploadRequest = {
      taskType: "imageUpload",
      taskUUID: generateUUID(),
      image: base64Data,
      filename: mergedFile.name || 'selfie-merged.jpg'
    };
    
    console.log('üì° Envoi upload request...');
    
    // √âTAPE 3: Use proxy API route to avoid CORS issues
    const response = await fetch('/api/runware', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify([uploadRequest]) // Runware attend un array
    });
    
    console.log('üì® R√©ponse upload status:', response.status);
    console.log('üì® R√©ponse upload headers:', Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      // Read response body once as text to avoid "body stream already read" error
      const errorText = await response.text();
      let errorData;
      try {
        errorData = JSON.parse(errorText);
        console.error('‚ùå Upload error data:', errorData);
      } catch {
        errorData = { error: errorText };
      }
      
      // Check for specific error types
      if (response.status === 401) {
        throw new Error('Cl√© API Runware invalide pour l\'upload');
      } else if (response.status === 413) {
        throw new Error('Fichier trop volumineux pour l\'upload');
      }
      
      console.error('‚ùå Upload failed:', errorText);
      throw new Error(`Upload HTTP ${response.status}: ${errorData.error || errorText}`);
    }
    
    // √âTAPE 4: Parse JSON response directly
    let data;
    try {
      data = await response.json();
      console.log('üìã Data pars√©e:', data);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      throw new Error('R√©ponse API invalide');
    }
    
    // √âTAPE 5: Extraction de l'URL
    // Check if response has data property (nested structure) or is direct array
    const results = data.data || data;
    
    if (!results || !Array.isArray(results) || results.length === 0) {
      console.error('‚ùå Structure de r√©ponse invalide:', data);
      throw new Error('R√©ponse upload vide ou invalide');
    }
    
    const uploadResult = results[0];
    console.log('üîç Premier √©l√©ment:', uploadResult);
    
    // V√©rifier plusieurs formats possibles d'URL
    const imageURL = uploadResult.imageURL || 
                     uploadResult.url || 
                     uploadResult.image_url ||
                     uploadResult.imagePath;
    
    if (!imageURL) {
      console.error('‚ùå Aucune URL trouv√©e dans:', uploadResult);
      throw new Error('Pas d\'URL dans la r√©ponse upload');
    }
    
    console.log('‚úÖ [UPLOAD] Succ√®s! URL:', imageURL);
    return imageURL;
    
  } catch (error) {
    console.error('üí• [UPLOAD] Erreur compl√®te:', error);
    
    // Better error classification for upload
    if (error.message.includes('Failed to fetch')) {
      throw new Error('Impossible de contacter l\'API Runware pour l\'upload. V√©rifiez votre connexion.');
    } else if (error.message.includes('CORS')) {
      throw new Error('Erreur CORS lors de l\'upload. L\'API doit autoriser votre domaine.');
    } else if (error.message.includes('401') || error.message.includes('Cl√© API')) {
      throw new Error('Cl√© API invalide pour l\'upload.');
    } else {
      throw new Error(`Upload √©chou√©: ${error.message}`);
    }
  }
}

// G√©n√©ration avec retry
async function generateSelfieImage(referenceURL: string, prompt: string, apiKey: string) {
  console.log('üé® G√©n√©ration selfie...');
  
  // Validate API key format
  if (!apiKey || apiKey.length < 10) {
    throw new Error('Cl√© API Runware invalide ou manquante');
  }
  
  // Validate reference URL
  if (!referenceURL || !referenceURL.startsWith('http')) {
    throw new Error('URL de r√©f√©rence invalide');
  }
  
  const generateRequest = {
    taskType: "imageInference",
    taskUUID: generateUUID(),
    positivePrompt: prompt,
    model: "bfl:3@1", // Flux Context Pro pour les images de r√©f√©rence
    height: 1248, // Portrait format (support√© par Runware API)
    width: 832,
    numberResults: 1,
    referenceImages: [referenceURL], // Format correct pour Flux Context Pro
    outputType: ["dataURI", "URL"],
    outputFormat: "JPEG",
    outputQuality: 95,
    includeCost: true
  };
  
  // Retry 3 fois
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`üéØ Tentative g√©n√©ration ${attempt}/3`);
      console.log('üîó API URL:', 'https://api.runware.ai/v1');
      console.log('üîë API Key pr√©sente:', !!apiKey);
      console.log('üîë API Key longueur:', apiKey.length);
      console.log('üì∏ Reference URL:', referenceURL);
      
      // Use proxy API route to avoid CORS issues
      const response = await fetch('/api/runware', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify([generateRequest])
      });
      
      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        // Read response body once as text to avoid "body stream already read" error
        const errorText = await response.text();
        let errorData;
        try {
          errorData = JSON.parse(errorText);
          console.error('‚ùå Generate error data:', errorData);
        } catch {
          errorData = { error: errorText };
        }
        
        // Check for specific error types
        if (response.status === 401) {
          throw new Error('Cl√© API Runware invalide. V√©rifiez votre cl√© API.');
        } else if (response.status === 403) {
          throw new Error('Acc√®s refus√©. V√©rifiez vos permissions API.');
        } else if (response.status === 429) {
          throw new Error('Limite de taux d√©pass√©e. Attendez avant de r√©essayer.');
        }
        
        throw new Error(`Generate HTTP ${response.status}: ${errorData.error || errorText}`);
      }
      
      let data;
      try {
        data = await response.json();
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON g√©n√©ration:', parseError);
        throw new Error('R√©ponse API g√©n√©ration invalide');
      }
      
      // Check if response has data property or is direct array
      const results = data.data || data;
      
      if (!results || !Array.isArray(results) || results.length === 0) {
        throw new Error('Pas de r√©sultat dans la r√©ponse');
      }
      
      const imageUrl = results[0]?.imageURL || results[0]?.imagePath;
      if (!imageUrl) {
        throw new Error('Pas d\'image dans la r√©ponse');
      }
      
      console.log('‚úÖ G√©n√©ration r√©ussie');
      return results[0];
      
    } catch (error) {
      console.log(`‚ùå Tentative ${attempt} √©chou√©e:`, error);
      
      // Better error classification
      if (error.message.includes('Failed to fetch')) {
        console.error('üåê Erreur r√©seau d√©tect√©e:', {
          message: error.message,
          attempt: attempt,
          apiUrl: 'https://api.runware.ai/v1',
          hasApiKey: !!apiKey,
          referenceUrl: referenceURL
        });
        
        if (attempt === 3) {
          throw new Error('Impossible de contacter l\'API Runware. V√©rifiez votre connexion internet et votre cl√© API.');
        }
      } else if (error.message.includes('CORS')) {
        throw new Error('Erreur CORS. L\'API Runware doit autoriser votre domaine.');
      } else if (error.message.includes('401') || error.message.includes('Cl√© API')) {
        throw new Error('Cl√© API Runware invalide. V√©rifiez votre configuration.');
      }
      
      if (attempt === 3) {
        throw new Error(`G√©n√©ration √©chou√©e apr√®s 3 tentatives: ${error.message}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
    }
  }
  
  throw new Error('G√©n√©ration impossible');
}

// ‚úÖ FONCTION SELFIE EFFECT FINALE
export async function applySelfieWithCelebrityEffect(
  userPhoto: File | string,
  celebrityPhoto: File | string,
  customPrompt?: string,
  apiKey?: string
) {
  
  console.log('üé¨ [SELFIE EFFECT] Version corrig√©e');
  
  // Enhanced validation
  console.log('üîç [VALIDATION] V√©rification des param√®tres:', {
    hasUserPhoto: !!userPhoto,
    hasCelebrityPhoto: !!celebrityPhoto,
    hasApiKey: !!apiKey,
    apiKeyLength: apiKey?.length || 0,
    userPhotoType: typeof userPhoto,
    celebrityPhotoType: typeof celebrityPhoto
  });
  
  try {
    // Validation stricte
    if (!userPhoto) {
      throw new Error('Photo utilisateur manquante');
    }
    
    if (!celebrityPhoto) {
      throw new Error('Photo c√©l√©brit√© manquante');
    }
    
    if (!apiKey || apiKey.length < 10) {
      throw new Error('Cl√© API Runware manquante ou invalide. V√©rifiez votre fichier .env');
    }
    
    console.log('‚úÖ Validations OK');
    
    // √âTAPE 1: Conversion en Files si n√©cessaire
    let userFile: File;
    let celebrityFile: File;
    
    if (typeof userPhoto === 'string') {
      console.log('üîÑ Conversion URI utilisateur vers File...');
      userFile = await uriToFile(userPhoto, 'user-photo.jpg');
    } else {
      userFile = userPhoto;
    }
    
    if (typeof celebrityPhoto === 'string') {
      console.log('üîÑ Conversion URI c√©l√©brit√© vers File...');
      celebrityFile = await uriToFile(celebrityPhoto, 'celebrity-photo.jpg');
    } else {
      celebrityFile = celebrityPhoto;
    }
    
    // V√©rifier que les fichiers ne sont pas vides
    if (userFile.size === 0) {
      throw new Error('Photo utilisateur invalide');
    }
    
    if (celebrityFile.size === 0) {
      throw new Error('Photo c√©l√©brit√© invalide');
    }
    
    // √âTAPE 2: Fusion avec nouvelle fonction
    console.log('üîÑ Fusion des images...');
    let mergedFile: File;
    
    if (Platform.OS === 'web') {
      // Web: fusion r√©elle des images
      mergedFile = await mergeImagesForSelfieFixed(userFile, celebrityFile);
    } else {
      // Mobile: cr√©er une fusion simple c√¥te √† c√¥te
      console.log('üì± Fusion mobile simplifi√©e...');
      
      // Pour mobile, on va cr√©er une fusion basique en utilisant canvas
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        // Fallback: utiliser seulement l'image utilisateur
        console.warn('‚ö†Ô∏è Canvas non disponible, utilisation image utilisateur seule');
        mergedFile = userFile;
      } else {
        // Cr√©er une fusion simple
        canvas.width = 1024;
        canvas.height = 512;
        
        // Fond blanc
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, 1024, 512);
        
        // Charger et dessiner les images
        const img1 = new Image();
        const img2 = new Image();
        
        await new Promise((resolve, reject) => {
          let loadedCount = 0;
          
          const onLoad = () => {
            loadedCount++;
            if (loadedCount === 2) {
              // Dessiner les deux images c√¥te √† c√¥te
              ctx.drawImage(img1, 0, 0, 512, 512);
              ctx.drawImage(img2, 512, 0, 512, 512);
              resolve(null);
            }
          };
          
          img1.onload = onLoad;
          img2.onload = onLoad;
          img1.onerror = reject;
          img2.onerror = reject;
          
          img1.src = URL.createObjectURL(userFile);
          img2.src = URL.createObjectURL(celebrityFile);
        });
        
        // Convertir canvas en File
        const blob = await new Promise<Blob>((resolve) => {
          canvas.toBlob((blob) => resolve(blob!), 'image/jpeg', 0.9);
        });
        
        mergedFile = new File([blob], 'merged-mobile.jpg', { type: 'image/jpeg' });
        
        // Nettoyer
        URL.revokeObjectURL(img1.src);
        URL.revokeObjectURL(img2.src);
      }
    }
    
    // √âTAPE 3: Upload avec fonction corrig√©e
    console.log('üì§ Upload avec fonction corrig√©e...');
    const referenceURL = await uploadMergedImageFixed(mergedFile, apiKey);
    
    // √âTAPE 4: Prompt automatique sp√©cialis√© iPhone selfie style
    const SELFIE_WITH_STAR_PROMPT = customPrompt || `Take an extremely ordinary and unremarkable iPhone selfie, with no clear subject or sense of composition-just a quick accidental snapshot. The photo has slight motion blur and uneven lighting from streetlights or indoor lamps, causing mild overexposure in some areas. The angle is cute and giving the picture a deliberately mediocre feel, as if it was taken absentmindedly while pulling the phone from a pocket.
The main character is uploaded first person, and the second person next to him/her, both caught in a casual, imperfect moment. The background shows a lively los angeles street light at night, with neon lights, traffic, and blurry figures passing by. The overall look is intentionally plain and random, capturing the authentic vibe of a poorly composed, spontaneous iPhone selfie.`;
    
    console.log('üé® G√©n√©ration avec prompt iPhone style...');
    const result = await generateSelfieImage(referenceURL, SELFIE_WITH_STAR_PROMPT, apiKey);
    
    console.log('üéâ [SELFIE EFFECT] SUCC√àS TOTAL !');
    
    return {
      imageURL: result.imageURL,
      taskUUID: result.taskUUID,
      cost: result.cost || 0,
      mergedFileSize: mergedFile.size,
      referenceURL: referenceURL,
      usedPrompt: "Automatic iPhone selfie style",
      platform: Platform.OS
    };
    
  } catch (error) {
    console.error('üí• [SELFIE EFFECT] ERREUR FINALE:', error);
    
    // Messages utilisateur friendly
    if (error.message.includes('Network request failed') || 
        error.message.includes('Failed to fetch') || 
        error.message.includes('Impossible de contacter')) {
      throw new Error('Impossible de contacter l\'API Runware. V√©rifiez votre connexion internet et votre cl√© API.');
    } else if (error.message.includes('401')) {
      throw new Error('Cl√© API Runware invalide. V√©rifiez votre configuration.');
    } else if (error.message.includes('CORS')) {
      throw new Error('Erreur CORS. Contactez le support pour la configuration du domaine.');
    } else if (error.message.includes('Fusion √©chou√©e')) {
      throw new Error('Impossible de fusionner les images. V√©rifiez le format.');
    } else if (error.message.includes('Cl√© API')) {
      throw new Error('Probl√®me avec la cl√© API Runware. V√©rifiez votre configuration.');
    } else {
      throw new Error(`Selfie √©chou√©: ${error.message}`);
    }
  }
}